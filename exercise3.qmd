---
title: "exercise3"
format: html
---

##Preperation
```{r}
library(readr)
library(magrittr)
library(sf)
library(lubridate)
library(RColorBrewer)
library(SimilarityMeasures)
```

```{r}
#import own posma data from data folder
posmo <- read_delim("data/posmo_2023-04-05T00_00_00+02_00-2023-05-04T23_59_59+02_00.csv")
#select only important columns which are used for further analysis
posmo <- posmo %>%
  select(datetime, lon_x, lat_y)
#transform posmo data into CRS 2056 (LV03)
posmo <- st_as_sf(posmo, coords = c("lon_x", "lat_y"), crs = 4326, remove = FALSE, na.fail = FALSE) %>%
  st_transform(crs = 2056)
head(posmo)
```

```{r}
#extract coordinates from posmo data
posmo_coord <- st_coordinates(posmo)
#combine the two data sets
posmo <- cbind(posmo, posmo_coord)
#extract one day for analysis
posmo_filtered <- posmo %>%
  filter(as.Date(datetime) == "2023-05-02")
```

##Task 1
```{r}
#calculate distance between points in moving window
posmo_filtered <- posmo_filtered %>%
  mutate(
    n_plus1 = sqrt((lead(X)-X)^2 + (lead(Y)-Y)^2),
    n_plus2 = sqrt((lead(X, 2)-X)^2 + (lead(Y, 2)-Y)^2),
    n_minus1 = sqrt((lag(X)-X)^2 + (lag(Y)-Y)^2),
    n_minus2 = sqrt((lag(X, 2)-X)^2 + (lag(Y, 2)-Y)^2)
  )
#calculate mean distance for moving window
posmo_filtered <- posmo_filtered %>%
  rowwise() %>%
  mutate(
    stepMean = mean(c(n_plus1, n_plus2, n_minus1, n_minus2))
  ) %>%
  ungroup()
```

##Task 2
```{r}
#define static points
posmo_filtered <- posmo_filtered %>%
  mutate(
    static = stepMean < mean(stepMean, na.rm = TRUE)
  )
#remove static points
posmo_nstatic <- posmo_filtered %>%
  filter(!static)
```

##Task 3
```{r}
ggplot(posmo_filtered, aes(X, Y)) +
  geom_point(aes(color=static)) +
  geom_path() +
  coord_equal()
```

##Task 4
```{r}
#definition of function to assign unique IDs
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}
#assign unique IDs
posmo_filtered <- posmo_filtered %>%
  mutate(
    segment_id = rle_id(static)
  )
head(posmo_filtered$segment_id)
#plot segments according to segment ID
ggplot(posmo_filtered, aes(X, Y)) +
  geom_point(aes(color=segment_id)) +
  geom_path() +
  coord_equal()
```

```{r}
#calculate time steps
posmo_filtered <- posmo_filtered %>%
  mutate(
    timestep = as.numeric(difftime(lead(datetime), datetime))
  )
#filter time steps
posmo_filtered %>%
  group_by(segment_id) %>%
  mutate(
    timestep_grouped = sum(timestep)
  ) %>%
  filter(timestep_grouped >= 5*60) %>%
  ggplot(aes(X, Y)) +
  geom_point(aes(color=segment_id)) +
  geom_path() +
  coord_equal()
```

##Task 5
```{r}
#import pedestrian dataset
pedestrian <- read_delim("data/pedestrian.csv") %>%
  as.data.frame()
#transform pedestrian dataset
pedestrian <- st_as_sf(pedestrian, coords = c("E", "N"), crs = 2056, remove = FALSE, na.fail = FALSE)
#display trajectories
ggplot(pedestrian, aes(E, N)) +
  facet_wrap(~TrajID) +
  geom_path() +
  geom_point(aes(color = factor(TrajID))) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
  ggtitle("Visual comparison of the 6 trajectories") + 
  scale_color_discrete(name = "Trajectory ID")
```

##Task 6
```{r}
#extract different trajectories
traj1 <- filter(pedestrian, TrajID == 1) %>%
  st_coordinates() %>%
  as.matrix()
traj2 <- filter(pedestrian, TrajID == 2) %>%
  st_coordinates() %>%
  as.matrix()
traj3 <- filter(pedestrian, TrajID == 3) %>%
  st_coordinates() %>%
  as.matrix()
traj4 <- filter(pedestrian, TrajID == 4) %>%
  st_coordinates() %>%
  as.matrix()
traj5 <- filter(pedestrian, TrajID == 5) %>%
  st_coordinates() %>%
  as.matrix()
traj6 <- filter(pedestrian, TrajID == 6) %>%
  st_coordinates() %>%
  as.matrix()
```

```{r}
#calculate dtw
dtw1_2 <- DTW(traj1, traj2)
dtw1_3 <- DTW(traj1, traj3)
dtw1_4 <- DTW(traj1, traj4)
dtw1_5 <- DTW(traj1, traj5)
dtw1_6 <- DTW(traj1, traj6)
dtw <- c(dtw1_2, dtw1_3, dtw1_4, dtw1_5, dtw1_6)
#calculate editdist
editdist1_2 <- EditDist(traj1, traj2)
editdist1_3 <- EditDist(traj1, traj3)
editdist1_4 <- EditDist(traj1, traj4)
editdist1_5 <- EditDist(traj1, traj5)
editdist1_6 <- EditDist(traj1, traj6)
editdist <- c(editdist1_2, editdist1_3, editdist1_4, editdist1_5, editdist1_6)
#calculate frechet
frechet1_2 <- Frechet(traj1, traj2)
frechet1_3 <- Frechet(traj1, traj3)
frechet1_4 <- Frechet(traj1, traj4)
frechet1_5 <- Frechet(traj1, traj5)
frechet1_6 <- Frechet(traj1, traj6)
frechet <- c(frechet1_2, frechet1_3, frechet1_4, frechet1_5, frechet1_6)
#calculate lcss
lcss1_2 <- LCSS(traj1, traj2, 2, 2, 0.5)
lcss1_3 <- LCSS(traj1, traj3, 2, 2, 0.5)
lcss1_4 <- LCSS(traj1, traj4, 2, 2, 0.5)
lcss1_5 <- LCSS(traj1, traj5, 2, 2, 0.5)
lcss1_6 <- LCSS(traj1, traj6, 2, 2, 0.5)
lcss <- c(lcss1_2, lcss1_3, lcss1_4, lcss1_5, lcss1_6)
#combine everything in one dataframe
similarity_values <- c(dtw, editdist, frechet, lcss)
#create column to identify which variable each value belongs to
similarity_method <- c(rep("dtw", 5), rep("editdist", 5), rep("frechet", 5), rep("lcss", 5))
#create columne to identify which trajecotries were compared
traj_num <- c(rep(c(2,3,4,5,6), 4))
#create dataframe where everything is combined
df <- data.frame(similarity_method, traj_num, similarity_values)
```

```{r}
#plot results
ggplot(df, aes(traj_num, similarity_values, fill=similarity_method)) +
  facet_wrap(~similarity_method, scales = "free_y") +
  geom_bar(stat = "identity", position = "dodge") +
  ggtitle("Computed similarity using different measures between trajectory 1 to all other trajectories") +
  xlab("Comparison trajectory") +
  ylab("Value") +
  theme(legend.position = "none")
plot("I would have expected that the trajectories 2 and 6 are more similar to trajectory 1 than the others. This would be represented with the FrÃ©chet distance as well as with the Dynamic Time Warping.")
```
